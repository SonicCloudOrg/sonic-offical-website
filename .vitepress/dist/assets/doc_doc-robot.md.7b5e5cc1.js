import{_ as e,o as l,c as i,a as o}from"./app.57a3dbd1.js";const g=JSON.parse('{"title":"通知机器人","description":"","frontmatter":{"contributors":["ZhouYixun","upengfei","ayumi760405","stephenwang1011"]},"headers":[{"level":2,"title":"钉钉群机器人","slug":"钉钉群机器人","link":"#钉钉群机器人","children":[]},{"level":2,"title":"飞书群机器人","slug":"飞书群机器人","link":"#飞书群机器人","children":[]},{"level":2,"title":"企业微信机器人","slug":"企业微信机器人","link":"#企业微信机器人","children":[]},{"level":2,"title":"友空间机器人","slug":"友空间机器人","link":"#友空间机器人","children":[]},{"level":2,"title":"Telegram机器人","slug":"telegram机器人","link":"#telegram机器人","children":[]},{"level":2,"title":"LINE Notify","slug":"line-notify","link":"#line-notify","children":[]},{"level":2,"title":"Slack机器人","slug":"slack机器人","link":"#slack机器人","children":[]}],"relativePath":"doc/doc-robot.md","lastUpdated":1716537034000}'),a={name:"doc/doc-robot.md"},t=o('<h1 id="通知机器人" tabindex="-1">通知机器人 <a class="header-anchor" href="#通知机器人" aria-hidden="true">#</a></h1><p>介绍各类型机器人接入方式。</p><h2 id="钉钉群机器人" tabindex="-1">钉钉群机器人 <a class="header-anchor" href="#钉钉群机器人" aria-hidden="true">#</a></h2><ol><li>选择需要发送机器人的群聊，点击右上方【群设置】。</li><li>点击【智能群助手】。</li><li>点击【添加机器人】。</li><li>选择【自定义】机器人。</li><li>（可选）点击安全设置里面的【加签】，下方出现的即为Sonic平台的【机器人密钥】，复制该密钥填写到项目中。</li><li>点击【完成】按钮，机器人将添加完成，此时出现的WebHook即为Sonic平台的【机器人Hook】，复制该WebHook填写到项目中。</li><li>完成！平台即可推送消息。</li></ol><h2 id="飞书群机器人" tabindex="-1">飞书群机器人 <a class="header-anchor" href="#飞书群机器人" aria-hidden="true">#</a></h2><ol><li>选择需要发送机器人的群聊，点击【设置】。</li><li>点击【群机器人】。</li><li>点击【添加机器人】。</li><li>选择【自定义机器人】。</li><li>（可选）点击安全设置里面的【签名校验】，出现的即为Sonic平台的【机器人密钥】，复制该密钥填写到项目中。</li><li>点击【完成】按钮，机器人将添加完成，此时出现的WebHook即为Sonic平台的【机器人Hook】，复制该WebHook填写到项目中。</li><li>完成！平台即可推送消息。</li></ol><h2 id="企业微信机器人" tabindex="-1">企业微信机器人 <a class="header-anchor" href="#企业微信机器人" aria-hidden="true">#</a></h2><ol><li>选择需要发送机器人的群聊，点击【设置】。</li><li>点击【添加机器人】。</li><li>点击【新创建一个机器人】。</li><li>点击【完成】按钮，机器人将添加完成，此时出现的WebHook即为Sonic平台的【机器人Hook】，复制该WebHook填写到项目中。</li><li>完成！平台即可推送消息。</li></ol><h2 id="友空间机器人" tabindex="-1">友空间机器人 <a class="header-anchor" href="#友空间机器人" aria-hidden="true">#</a></h2><ol><li>选择要发送机器人的群组，进入群组，点击【设置】</li><li>点击【群机器人】。</li><li>点击【添加机器人】-&gt;【自定义机器人】（也可选择已有机器人）。</li><li>点击【添加】按钮，机器人添加完成，此时出现的webHook即为Sonic平台的【机器人Hook】，复制该webHook填写到项目中。</li><li>完成!平台即可推送消息。</li></ol><h2 id="telegram机器人" tabindex="-1">Telegram机器人 <a class="header-anchor" href="#telegram机器人" aria-hidden="true">#</a></h2><ol><li>在Telegram內透过<a href="https://t.me/BotFather" target="_blank" rel="noreferrer">@BotFather</a> 建立Telegram机器人且取得机器人Token。</li><li>在Telegram内将机器人加入指定聊天或聊天群组。</li><li>利用<code>https://api.telegram.org/bot{Token}/getUpdates</code> 连结取得chatId</li><li>将以下连结<code>https://api.telegram.org/bot{Token}/sendMessage?chat_id={chatId}</code>的Token和chatId取代组成webHook。</li><li>组成的webHook即为Sonic平台的【机器人Hook】，复制该webHook填写到项目中。</li><li>完成！平台即可推送消息。</li><li><a href="https://core.telegram.org/bots/api" target="_blank" rel="noreferrer">Telegram Bot API参考连结</a></li></ol><h2 id="line-notify" tabindex="-1">LINE Notify <a class="header-anchor" href="#line-notify" aria-hidden="true">#</a></h2><ol><li>登入<a href="https://notify-bot.line.me/doc/en/" target="_blank" rel="noreferrer">Line Notify</a>且进入个人页面。</li><li>点击【发行权杖(Token)】并设定名称及选取要接收通知的群组。</li><li>按下发行后取得【权杖(Token)】。</li><li>取得的Token即为Sonic平台的【机器人Hook】，复制该Token填写到项目中。</li><li>完成！平台即可推送消息。</li><li><a href="https://notify-bot.line.me/doc/en/" target="_blank" rel="noreferrer">Line Notify API参考连结</a></li></ol><h2 id="slack机器人" tabindex="-1">Slack机器人 <a class="header-anchor" href="#slack机器人" aria-hidden="true">#</a></h2><ol><li>登录到<a href="https://api.slack.com/apps" target="_blank" rel="noreferrer">Slack App</a>，然后点击&quot;Create New App&quot;按钮创建一个App。</li><li>在App详情中，点击&quot;Features&quot; -&gt; &quot;Incoming Webhooks&quot; -&gt; &quot;Activate Incoming Webhooks&quot;。</li><li>接着点击&quot;Add New Webhook to Workspace&quot;按钮，然后选择你要发送的个人或者频道(channel)。</li><li>回到APP详情界面，复制刚才生成的Webhook URL。</li><li>进入Sonici平台，在消息推送设置页面选择Slack Bot, Webhook填写刚才复制的URL即可。</li></ol>',16),r=[t];function n(h,c,d,s,k,p){return l(),i("div",null,r)}const f=e(a,[["render",n]]);export{g as __pageData,f as default};
